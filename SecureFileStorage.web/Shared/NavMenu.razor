@using SecureFileStorage.Web.Services
@using SecureFileStorage.Core.Interfaces
@using SecureFileStorage.Infrastructure.Enums

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ITokenService TokenService
@inject IActivityLogService ActivityLogService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Secure File Storage</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable collapse" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (isAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="">
                    <span class="oi oi-home" aria-hidden="true"></span> Početna
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="myfiles">
                    <span class="oi oi-file" aria-hidden="true"></span> Moje datoteke
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="upload">
                    <span class="oi oi-cloud-upload" aria-hidden="true"></span> Prenesi datoteku
                </NavLink>
            </div>
            @if (isAdmin)
            {
                <div class="collapse" id="adminSection">
                    <div class="admin-section mt-2 px-3">
                        <div class="d-flex align-items-center justify-content-center mb-2 bg-primary text-white p-2">
                            <span class="oi oi-lock-locked me-2" aria-hidden="true"></span>
                            <span class="admin-title fw-bold text-uppercase">Admin Actions</span>
                        </div>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="register">
                                <span class="oi oi-plus me-2" aria-hidden="true"></span> Dodaj korisnika
                            </NavLink>
                        </div>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="statistic">
                                <span class="oi oi-bar-chart me-2" aria-hidden="true"></span> Pregled akcija
                            </NavLink>
                        </div>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="allusers">
                                <span class="oi oi-people me-2" aria-hidden="true"></span> Korisnici
                            </NavLink>
                        </div>
                    </div>
                </div>
            }
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" @onclick="Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Odjava
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Prijava
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool isAuthenticated;
    private bool isAdmin;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += async (sender, args) => await OnLocationChanged(sender, args);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthenticationState();
            StateHasChanged();
        }
    }


    private async Task OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await CheckAuthenticationState();
        StateHasChanged();
    }

    private async Task CheckAuthenticationState()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (string.IsNullOrWhiteSpace(token))
        {
            isAuthenticated = false;
            isAdmin = false; 
            return;
        }

        isAuthenticated = true;

        try
        {
            var userId = await TokenService.GetLoggedInUserIdAsync();
            isAdmin = userId != null && await TokenService.UserIsAdmin(userId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking authentication state: {ex.Message}");
            isAuthenticated = false;
            isAdmin = false;
        }
    }

    private async void Logout()
    {
        var loggedUserId = await TokenService.GetLoggedInUserIdAsync();
        await ActivityLogService.LogActivity(loggedUserId, 1, ActivityLogEnum.Logout); // activity log

        JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        isAuthenticated = false;
        NavigationManager.NavigateTo("login");
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}