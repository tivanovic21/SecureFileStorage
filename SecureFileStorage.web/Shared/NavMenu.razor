@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Secure File Storage</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable collapse" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (isAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="">
                    <span class="oi oi-home" aria-hidden="true"></span> Početna
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="upload">
                    <span class="oi oi-cloud-upload" aria-hidden="true"></span> Prenesi datoteku
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" @onclick="Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Odjava
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Prijava
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool isAuthenticated;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthenticationState();
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await CheckAuthenticationState();
        StateHasChanged();
    }

    private async Task CheckAuthenticationState()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        isAuthenticated = !string.IsNullOrWhiteSpace(token);
    }

    private void Logout()
    {
        JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        isAuthenticated = false;
        NavigationManager.NavigateTo("login");
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}