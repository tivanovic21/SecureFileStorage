@page "/statistic"

@using SecureFileStorage.Core.Dtos
@using SecureFileStorage.Core.Interfaces
@using SecureFileStorage.Web.Services
@using SecureFileStorage.Infrastructure.Enums
@using SecureFileStorage.Core.Entities

@inject ITokenService TokenService
@inject IFileService FileService
@inject IActivityLogService ActivityLogService
@inject IFileAccessService FileAccessService
@inject IUserService UserService
@inject NavigationManager Navigation

<div class="container mt-4">
    @if (isLoading)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Učitavanje...</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3" role="alert">
            @message
        </div>
    }
</div>

<div class="container mt-4">
    <h3>Zapisnik aktivnosti</h3>
    <select @onchange="HandleUserSelection">
        <option value="">All Users</option>
        @if (Users != null && Users.Any())
        {
            @foreach (var user in Users)
            {
                <option value="@user.Email">@user.Email</option>
            }
        }
    </select>
    <select @onchange="OrderByActionType">
        <option value="">Action Type</option>
        <option value="Upload">Upload</option>
        <option value="Share Access">Share Access</option>
        <option value="Download">Download</option>
        <option value="Validate Digital Signature">Validate Digital Signature</option>
    </select>
    <select @onchange="OrderBy">
        <option value="orderbyNameAsc">Name Ascending</option>
        <option value="orderbyNameDesc">Name Descending</option>
        <option value="orderbyTimeAsc">Time Ascending</option>
        <option value="orderbyTimeDesc">Time Descending</option>
        <option value="orderbyFileNameDesc">FileName Descending</option>
        <option value="orderbyFileNameAsc">FileName Ascending</option>
    </select>
    @if (activities != null && activities.Any())
    {
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>Izvršitelj akcije</th>
                    <th>Tip akcije</th>
                    <th>Vrijeme akcije</th>
                    <th>Ime dokumenta</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activity in FilteredActivities)
                {
                    <tr>
                        <td>@activity.User.Email</td>
                        <td>@activity.Action</td>
                        <td>@activity.Timestamp.ToString("dd/MM/yyyy HH:mm")</td>
                        @if(activity.File != null)
                        {
                            <td>@activity.File.FileName</td>
                        }else{
                            <td>Non file action</td>
                        }
                        <td>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    } else if (!isLoading)
    {
        <p>Ne postoje zapisi.</p>
    }

</div>

@code {
    private bool isLoading = false;
    private bool isError = false;
    private string message;
    private List<FileDto> files = new();
    private List<FileAccessDto> sharedFiles = new();
    private bool isAddUserModalOpen = false;
    private bool isActionsModalOpen = false;
    private int selectedFileId;
    private string newUserEmail = string.Empty;
    private List<ActivityLogDto> activities = new();
    private string selectedDocument = string.Empty;
    private int loggedUserId;
    private List<User> Users;
    private string SelectedUser;
    private List<ActivityLogDto> FilteredActivities;
    private bool isAdmin = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            loggedUserId = await TokenService.GetLoggedInUserIdAsync();
            isAdmin = await TokenService.UserIsAdmin(loggedUserId);
            
            if (!isAdmin) Navigation.NavigateTo("/");
            
            activities = (await ActivityLogService.GetAllActivityLogs()).ToList();

            Users = activities.Select(a => a.User).Distinct().ToList();
            FilteredActivities = activities;

            var userEmail = (await UserService.GetUserByIdAsync(loggedUserId)).Email;
            sharedFiles = (await FileAccessService.GetFileAccessesForUser(email: userEmail, loggedUserId)).ToList();
        } catch (Exception ex)
        {
            isError = true;
            message = ex.Message;
        } finally
        {
            isLoading = false;
        }
    }

    private async void OrderBy(ChangeEventArgs e)
    {
        var activitesToBeOrdered = activities;
        if(SelectedUser != "")
        {
            activitesToBeOrdered = FilteredActivities;
        }
        switch (e.Value)
        {
            case "orderbyNameAsc":
                FilteredActivities = activitesToBeOrdered.OrderBy(a => a.User.Email).ToList();
                break;
            case "orderbyNameDesc":
                FilteredActivities = activitesToBeOrdered.OrderByDescending(a => a.User.Email).ToList();
                break;
            case "orderbyTimeAsc":
                FilteredActivities = activitesToBeOrdered.OrderBy(a => a.Timestamp).ToList();
                break;
            case "orderbyTimeDesc":
                FilteredActivities = activitesToBeOrdered.OrderByDescending(a => a.Timestamp).ToList();
                break;
            case "orderbyFileNameAsc":
                FilteredActivities = activitesToBeOrdered.OrderBy(a => a.File?.FileName).ToList();
                break;
            case "orderbyFileNameDesc":
                FilteredActivities = activitesToBeOrdered.OrderByDescending(a => a.File?.FileName).ToList();
                break;
            default:
                break;
        }
        StateHasChanged();
    }

    private string selectedAction;

    private void OrderByActionType(ChangeEventArgs e)
    {
        selectedAction = e.Value?.ToString();

        var activitesToBeOrdered = activities;
        if (SelectedUser != "")
        {
            activitesToBeOrdered = FilteredActivities;
        }

        if (!string.IsNullOrEmpty(selectedAction))
        {
            FilteredActivities = activitesToBeOrdered
                .OrderByDescending(a => a.Action == selectedAction)
                .ThenBy(a => a.Action)
                .ToList();
        }
    }

    private void HandleUserSelection(ChangeEventArgs e)
    {
        SelectedUser = e.Value?.ToString();

        if (!string.IsNullOrEmpty(SelectedUser))
        {
            FilteredActivities = activities.Where(a => a.User.Email == SelectedUser).ToList();
        } else
        {
            FilteredActivities = activities;
        }
    }

    private async Task ValidateDigitalSignature(int fileId)
    {
        isLoading = true;
        isError = false;
        message = string.Empty;
        try
        {
            var isValid = await FileService.ValidateDigitalSignature(fileId);
            if (isValid)
            {
                message = "Potpis je valjan.";
            } else
            {
                isError = true;
                message = "Potpis nije valjan.";
            }
            await ActivityLogService.LogActivity(loggedUserId, fileId, ActivityLogEnum.ValidateDigitalSignature); // activity log
        } catch (Exception ex)
        {
            isError = true;
            message = $"Greška prilikom provjere potpisa {ex.Message}";
        } finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OpenAddUserModal(int fileId)
    {
        selectedFileId = fileId;
        isAddUserModalOpen = true;
    }

    private void CloseAddUserModal()
    {
        isAddUserModalOpen = false;
        newUserEmail = string.Empty;
    }

    private async void OpenActionsModal(int fileId)
    {
        await GetActivityLogsForFile(fileId);
        selectedDocument = files.First(f => f.Id == fileId).FileName;
        isActionsModalOpen = true;
    }

    private void CloseActionsModal()
    {
        isActionsModalOpen = false;
    }

    private async Task GetActivityLogsForFile(int fileId)
    {
        try
        {
            isLoading = true;
            activities = (await ActivityLogService.GetActivityLogsForFile(fileId)).ToList();
        } catch (Exception ex)
        {
            isError = true;
            message = ex.Message;
        } finally
        {
            isLoading = false;
        }
    }
}

<script>
    
</script>