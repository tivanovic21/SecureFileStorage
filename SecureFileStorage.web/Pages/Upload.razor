@page "/upload"

@using SecureFileStorage.Core.Interfaces
@using SecureFileStorage.Web.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject IFileStorageService FileStorageService
@inject ITokenService TokenService
@inject IFileService FileService


<div class="container mt-4">
    <h3>Prenesi datoteku</h3>

    <InputFile OnChange="@LoadFiles" class="form-control mb-3"/>

    @if (isLoading) {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Učitavanje...</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(message)) {
        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3" role="alert">
            @message
        </div>
    }
</div>

@code {
    private bool isLoading;
    private string message;
    private bool isError;
    private async Task LoadFiles(InputFileChangeEventArgs e) {
        try {
            isLoading = true;
            isError = false;
            message = string.Empty;

            var file = e.File;
            using var originalStream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await originalStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            var userId = await TokenService.GetLoggedInUserIdAsync();
            var uploadTimestamp = DateTime.UtcNow;
            var (signature, publicKeyString) = await FileService.GenerateSignatureAsync(file.Name, userId, memoryStream, uploadTimestamp);

            memoryStream.Position = 0;
            var encryptedUrl = await FileStorageService.UploadFileAsync(memoryStream, file.Name, userId); // azure upload

            var fileDto = new SecureFileStorage.Core.Dtos.FileDto {
                FileName = file.Name,
                EncryptedUrl = encryptedUrl,
                UploaderId = userId,
                UploadedAt = uploadTimestamp,
                Signature = signature,
                PublicKey = publicKeyString
            };

            await FileService.AddFileAsync(fileDto); // db save
            message = "Datoteka uspješno prenesena!";
        } catch (Exception ex) {
            isError = true;
            message = $"Greška prilikom prijenosa datoteke: {ex.Message}";
        } finally {
            isLoading = false;
        }
    }
}