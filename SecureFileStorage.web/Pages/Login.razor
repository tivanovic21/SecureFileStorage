@page "/login"
@using System.Net.Http.Json
@using SecureFileStorage.Core.Interfaces
@using SecureFileStorage.Web.Services
@using SecureFileStorage.Infrastructure.Enums
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IActivityLogService ActivityLogService
@inject ITokenService TokenService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg p-4 mt-5">
                <h3 class="card-title text-center">Prijavi se</h3>

                @if (isAuthenticated) {
                    <div class="alert-success alert text-center">Već ste prijavljeni, preusmjeravanje...</div>
                }

                @if (message != null)
                {
                    <div class="alert-danger alert text-center">@message</div>
                }

                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                    </div>

                    <div class="form-group mt-3">
                        <label for="password">Lozinka</label>
                        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
                    </div>

                    <div class="form-group mt-3">
                        <button type="submit" class="btn btn-primary btn-block">Prijavi se</button>
                    </div>
                </EditForm>

                <div class="mt-3 d-flex justify-content-center align-items-center">
                    <span class="d-inline-flex align-items-center">
                        Nemaš račun? <NavLink class="btn btn-link ms-2" href="register">Registriraj se ovdje!</NavLink>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private LoginModel loginModel = new LoginModel();
    private string? message = null;

    private bool isAuthenticated;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            isAuthenticated = !string.IsNullOrWhiteSpace(token);
            if (isAuthenticated) {
                Navigation.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task HandleLogin() {
        message = null;
        try {
            var response = await Http.PostAsJsonAsync("api/users/login", loginModel);
            if (response.IsSuccessStatusCode) {
            var responseData = await response.Content.ReadFromJsonAsync<LoginResponse>();
            
            if (responseData == null || string.IsNullOrWhiteSpace(responseData.Token)) {
                message = "Greška prilikom prijave. Pokušajte ponovo.";
                return;
            }

            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", responseData.Token);
            isAuthenticated = true;
            loginModel = new LoginModel();
            var loggedUserId = await TokenService.GetLoggedInUserIdAsync();
            await ActivityLogService.LogActivity(loggedUserId, 1, ActivityLogEnum.Login); // activity log

            Navigation.NavigateTo("/");  
        } else {
            message = "Prijava nije uspela. " + await response.Content.ReadAsStringAsync();
        }
        } catch (Exception ex) {
            message = $"Greška prilikom prijave: {ex.Message.ToLower()}";
        }
    }

    public class LoginModel {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse {
        public string Token { get; set; } = string.Empty;
    }
}